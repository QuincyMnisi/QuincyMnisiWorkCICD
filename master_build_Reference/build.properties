###############################################################################
# Copyright © 2018 Software AG, Darmstadt, Germany and/or its licensors
# SPDX-License-Identifier: Apache-2.0
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.                                                            
###############################################################################

#--------------------------Global properties that will be used by all build files

# This is the path of the directory where Software AG products are installed.
# Use slash "/" as path separator. Example: Use "C:/SoftwareAG", instead of "C:\SoftwareAG".
sag.install.dir=${SAGHome}


# This is the root directory where the output (binary and ACDL) of the build will be placed.
# While building, a directory with the current build number will be created and under this
# one directory for each product will be build. The binary and the ACDLs for the product will
# be saved in the corresponding directory.
# Use slash "/" as path separator. Example: Use "C:/SoftwareAG", instead of "C:\SoftwareAG".
# The property value should not contain blank symbols at the end.
build.output.dir=${buildOutputDir}


# This is the directory where the assets for all the products that have to be build are located. This directory
# will contain only project folder, which can be any type (Optimize, TN etc). All the individual build files will go
# through each of the project folders to check if it is their project. If so, the project will be built not if not
# the next folder will be scanned.
# Normally you download them from a version control system (VCS) to your HDD.
# Use slash "/" as path separator. Example: Use "C:/SoftwareAG", instead of "C:\SoftwareAG".
# More than one directory can be specified by using ; delimiter. Please do not use blank symbols around the delimiter.
build.source.dir=${isProjectsDir};${isConfigDir};${bpmProjectsDir};${mwsProjectsDir};${rulesProjectsDir};${umProjectsDir}

# Use slash "/" as path separator. Example: Use "C:/SoftwareAG", instead of "C:\SoftwareAG".
# More than one directory can be specified by using ; delimiter. Please do not use blank symbols around the delimiter.
build.source.project.dir=


# This is the version of the current builds. A auto incremental build number will be appended to this to
# get the final build number. For example, the build for version 9.7 will have a build number = 9.8.1 and
# the second build number will be 9.8.2.
build.version=1.0


# Enable/disable the check out task
enable.checkout = false

# Enable/disable the archive task
enable.archive = false

# Use slash "/" as path separator. Example: Use "C:/SoftwareAG", instead of "C:\SoftwareAG".
build.archive.dir=


# Enable/disable the product builds
enable.build.IS = true
enable.build.MWS = false
enable.build.BPM = false
enable.build.TN = false
enable.build.Optimize = false
enable.build.Broker = false
enable.build.EDA = false
enable.build.RULES=false
enable.build.UniversalMessaging=false
enable.build.ApplicationPlatform=false
enable.build.AgileApps=false


#Logging properties
build.log.enable=false
build.log.fileName=
build.logLevel=info

#Exit on Error or Warning Property
build.exit.error=false


#-------------------------- Properties used by ApplicationPlatform

# This directory contians pre-built Application Platform assets. The Application Paltfrom build will include
# these assets in the compilation classpath of Application Platfom projets provided these projects declare dependencies 
# on the respective asset in the same way as to another Application Platform project. These assets will also be included 
# on equal footing in the publication to the asset repository as well as in the asset dependency resolutione. The 
# overall result is that in the asset repository the external assets are indistinguishable from the assets built from 
# source code.
# This directory can be downloaed from the version control system or populated from a built system external
# to the asset build.
# Some use cases to use an externals directry are to mix party bundles/wars with source code projects or to
# develop the assets with arbitrary tools and use the asset build only to prepare them for deployment.
# Use slash "/" as path separator. Example: Use "C:/SoftwareAG", instead of "C:\SoftwareAG".
build.external.dir=

# Set this to true delete the bndlib workspace where the SDK index is stored. Do this only if/when sag.install.dir is 
# changed to a new location. Once one build it executed against the new sag.install.dir the property can be reverted 
# back to false. The SDK index is created lazily and is used to speed up the Application Platform asset dependency 
# resolution. 
app.clean.workspace=false


#-------------------------- Properties used by UniversalMessaging



#-------------------------- Properties used by broker




#-------------------------- Properties used by IS

#Use this property only if you have set build.source.project.dir. This directory points to the absolute path of the config directory of Integration Server.
#Example, c:/SoftwareAG/IntegrationServer/config 
is.acdl.config.dir=



#-------------------------- Properties used by BPM
#List of Models to try to find seperate by semi-column for multiple
#Example test/Process
#Exampl multiple test/process;test2/process
bpm.acdl.model.ids=

#List of BAM processIDs 
#BAM models may have no dependencies so we will need a list to handle
#This differently in the ACDL file
#Example multiple BAM models test/process;test2/process  
bpm.acdl.bam.model.ids=
		
#Filter used to find models with specified version
#Find models with specified version operator choose to look for
#Example 1 will only return models with version 1
bpm.acdl.model.version=

#-------------------------- Properties used by Optimize
#Switches XSD validation of generated ACDL files on and off.
#Possible values "on" and "off" (default).
optimize.acdl.validation=off


#--------------------------- Properties used by Trading Networks


#--------------------------- Properties used by RULES
# Flag to indicate whether rule project archive creation and acdl creation should be skipped if there are
# validation warnings in the rule project
# valid values: true | false 
# default value: false
RULES.skip.on.validation.warning=


#--------------------------- Properties used by MWS
# The encoding of the Java source files used to build an MWS asset. 
# This encoding is supplied to the Java compiler when building MWS assets from source.
# If the source files have encoding that is not UTF-8 and contain symbols that cannot
# be mapped to UTF-8, you can specify the appropriate encoding.
# Example ISO-8859-15
mws.build.encoding=UTF-8
